syntax = "proto3";

import "needlestack/apis/collections.proto";
import "needlestack/apis/indices.proto";
import "needlestack/apis/tensors.proto";


/* Main entrypoint for external clients to run distributed kNN searches */
service Merger {
    rpc Search (SearchRequest) returns (SearchResponse);
    rpc SearchStream (SearchRequest) returns (stream SearchResultItem);
    rpc Retrieve (RetrieveRequest) returns (RetrieveResponse);
    rpc CollectionsAdd (CollectionsAddRequest) returns (CollectionsAddResponse);
    rpc CollectionsDelete (CollectionsDeleteRequest) returns (CollectionsDeleteRequest);
    rpc CollectionsList (CollectionsListRequest) returns (CollectionsListResponse);
    rpc CollectionsLoad (CollectionsLoadRequest) returns (CollectionsLoadResponse);
};

/* Worker used by `Merger` to perform single-node kNN search */
service Searcher {
    rpc Search (SearchRequest) returns (SearchResponse);
    rpc SearchStream (SearchRequest) returns (stream SearchResultItem);
    rpc Retrieve (RetrieveRequest) returns (RetrieveResponse);
    rpc CollectionsLoad (CollectionsLoadRequest) returns (CollectionsLoadResponse);
};

/********************
 *
 * Search Requests
 * 
 ********************/

/* An incoming search request which contains vector(s) to perform
 * kNN search with. Also contains metadata on how to perform the search. */
message SearchRequest {
    NDArray vector = 1;
    // Number of neighbors to return
    uint32 count = 2;

    // Search shards from collection
    string collection_name = 3;

    // Optionally provide shards within collection to search
    repeated string shard_names = 4;
};

message SearchResponse {
    repeated SearchResultItem items = 1;
};

/********************
 *
 * Retrieve Requests
 * 
 ********************/

message RetrieveRequest {
    string id = 1;
    // Find ids in this collection
    string collection_name = 2;

    // Optionally look at just these shards
    repeated string shard_names = 3;
};

message RetrieveResponse {
    RetrievalResultItem item = 1;
};
